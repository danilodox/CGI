/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package panels;

import java.awt.Color;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.filechooser.FileNameExtensionFilter;
import modelo.Abertura;
import modelo.AberturaBin;
import modelo.ContornoExternoBin;
import modelo.ContornoInternoBin;
import modelo.Dilatar;
import modelo.DilatarBin;
import modelo.Erosao;
import modelo.ErosaoBin;
import modelo.Fechamento;
import modelo.FechamentoBin;
import modelo.GradienteMorfologicoBin;
import modelo.HitOrMissBin;
import modelo.Subtract;
import static panels.PanelMorfologia.converterBuffered;
import processamentoDeImagem.Normalizacao;

/**
 *
 * @author Peu
 */
public class PanelMorfologiaBin extends javax.swing.JPanel {

    private BufferedImage imgT;
    private int[][] imagemMatriz;
    private int imgWidth;
    private int imgHeight;
    private int imgValorMaximo;
    private static PanelMorfologiaBin instance;
    
    /**
     * Creates new form PanelMorfologia
     */
    public PanelMorfologiaBin() {
        initComponents();
    }
    
    public static synchronized PanelMorfologiaBin getInstance() {
        if (instance == null) {
            instance = new PanelMorfologiaBin();
        }
        return instance;
    }
    
    public void setTitle(String text) {
        lab_title.setText(text);
    }

    public int[][] getImagemMatriz() {
        return imagemMatriz;
    }

    public void setImagemMatriz(int[][] imagemMatriz) {
        this.imagemMatriz = imagemMatriz;
    }

    public int getImgWidth() {
        return imgWidth;
    }

    public void setImgWidth(int imgWidth) {
        this.imgWidth = imgWidth;
    }

    public int getImgHeight() {
        return imgHeight;
    }

    public void setImgHeight(int imgHeight) {
        this.imgHeight = imgHeight;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lab_title = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        panel_imagemO = new javax.swing.JPanel();
        panel_imagemF = new javax.swing.JPanel();
        btn_selecionarImagem = new javax.swing.JButton();
        btn_aplicar = new javax.swing.JButton();

        lab_title.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lab_title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lab_title.setText("Operação de Dilatação");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lab_title, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lab_title, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout panel_imagemOLayout = new javax.swing.GroupLayout(panel_imagemO);
        panel_imagemO.setLayout(panel_imagemOLayout);
        panel_imagemOLayout.setHorizontalGroup(
            panel_imagemOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        panel_imagemOLayout.setVerticalGroup(
            panel_imagemOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout panel_imagemFLayout = new javax.swing.GroupLayout(panel_imagemF);
        panel_imagemF.setLayout(panel_imagemFLayout);
        panel_imagemFLayout.setHorizontalGroup(
            panel_imagemFLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 256, Short.MAX_VALUE)
        );
        panel_imagemFLayout.setVerticalGroup(
            panel_imagemFLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 256, Short.MAX_VALUE)
        );

        btn_selecionarImagem.setText("Selecionar imagem");
        btn_selecionarImagem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_selecionarImagemActionPerformed(evt);
            }
        });

        btn_aplicar.setText("Aplicar");
        btn_aplicar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_aplicarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(btn_selecionarImagem, javax.swing.GroupLayout.DEFAULT_SIZE, 256, Short.MAX_VALUE)
                    .addComponent(panel_imagemO, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 210, Short.MAX_VALUE)
                .addComponent(btn_aplicar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(205, 205, 205)
                .addComponent(panel_imagemF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(panel_imagemF, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(panel_imagemO, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(90, 90, 90)
                        .addComponent(btn_aplicar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btn_selecionarImagem, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(241, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btn_selecionarImagemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_selecionarImagemActionPerformed
        try {
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setCurrentDirectory(new File("src/"));
            FileNameExtensionFilter filter = new FileNameExtensionFilter("PGM Images", "pgm");
            fileChooser.setFileFilter(filter);

            int returnVal = fileChooser.showOpenDialog(btn_selecionarImagem);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                panel_imagemF.repaint();

                populaImgInPanel(criaImagem(fileChooser.getSelectedFile()), panel_imagemO);
                btn_aplicar.setEnabled(true);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "OPS! Não foi possivel carregar a imagem.");
        }
    }//GEN-LAST:event_btn_selecionarImagemActionPerformed

    private void btn_aplicarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_aplicarActionPerformed
        PanelMenuMorfologiaBin menuMorfologiaBin = PanelMenuMorfologiaBin.getInstance();
        switch (menuMorfologiaBin.getTipoAlgoritimo()) {
            case DILATACAO:
                panel_imagemF.getGraphics().drawImage(new DilatarBin(imagemMatriz, getImgWidth(), getImgHeight()).dilatarBin(), 0, 0, null);
                break;
            case EROSAO:
                panel_imagemF.getGraphics().drawImage(new ErosaoBin(imagemMatriz, getImgWidth(), getImgHeight()).erodirBin(), 0, 0, null);
                break;
            case GRADIENTEMORFOLOGICO:
                panel_imagemF.getGraphics().drawImage(new GradienteMorfologicoBin(imagemMatriz, getImgWidth(), getImgHeight()).gradienteMorfologicoBin(), 0, 0, null);
                break;
            case ABERTURA:
                panel_imagemF.getGraphics().drawImage(new AberturaBin(imagemMatriz, getImgWidth(), getImgHeight()).aberturaBin(), 0, 0, null);
                break;
            case FECHAMENTO:
                panel_imagemF.getGraphics().drawImage(new FechamentoBin(imagemMatriz, getImgWidth(), getImgHeight()).fechamentoBin(), 0, 0, null);
                break;
            case CONTORNOEXTERNO:
                panel_imagemF.getGraphics().drawImage(new ContornoExternoBin(imagemMatriz, getImgWidth(), getImgHeight()).contornoExternoBin(), 0, 0, null);
                break;
            case CONTORNOINTERNO:
                panel_imagemF.getGraphics().drawImage(new ContornoInternoBin(imagemMatriz, getImgWidth(), getImgHeight()).contornoInternoBin(), 0, 0, null);
                break;
            case HITORMISS:
                panel_imagemF.getGraphics().drawImage(new HitOrMissBin(imagemMatriz, getImgWidth(), getImgHeight()).hitOrMissBin(), 0, 0, null);
                break;
        }
    }//GEN-LAST:event_btn_aplicarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_aplicar;
    private javax.swing.JButton btn_selecionarImagem;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel lab_title;
    private javax.swing.JPanel panel_imagemF;
    private javax.swing.JPanel panel_imagemO;
    // End of variables declaration//GEN-END:variables
    
    /**
     * Ler o arquivo pgm e monta a popula a matriz imagem
     *
     * @param file
     * @return
     */
    public int[][] criaImagem(File file) {
        FileInputStream fileInputStream = null;
        Scanner scan = null;
        try {
            fileInputStream = new FileInputStream(file);
            scan = new Scanner(fileInputStream);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(PanelTransformacoes.class.getName()).log(Level.SEVERE, null, ex);
        }

        // Descarta a primeira linha
        scan.nextLine();

        // Read pic width, height and max value
        imgWidth = scan.nextInt();
        imgHeight = scan.nextInt();
        imgValorMaximo = scan.nextInt();

        /**
         * Monta a matriz imagem com os pixels da imagem selecionada
         */
        imagemMatriz = new int[imgHeight][imgWidth];
        for (int row = 0; row < imgHeight; row++) {
            for (int col = 0; col < imgWidth; col++) {
                // Popula a matriz com os pixels da imagem
                imagemMatriz[row][col] = scan.nextInt();
            }
        }

        try {
            fileInputStream.close();
        } catch (IOException ex) {
            Logger.getLogger(PanelTransformacoes.class.getName()).log(Level.SEVERE, null, ex);
        }
        return imagemMatriz;
    }
    
    /**
     * Exibe a imagem no jPanel
     *
     * @param img
     * @param imgPanel
     */
    public void populaImgInPanel(int[][] img, JPanel imgPanel) {
        /**
         * Monta a matriz imagem com os pixels da imagem selecionada
         */
        BufferedImage imagemInput = new BufferedImage(imgWidth, imgHeight, BufferedImage.TYPE_INT_RGB);
        for (int row = 0; row < img.length; row++) {
            for (int col = 0; col < img[0].length; col++) {
                // Prepara a imagem para ser desenhada no jpanel
                imagemInput.setRGB(col, row, getCorPixel(imagemMatriz[row][col]));
            }
        }
        imgT = imagemInput;

        /**
         * Exibe a imagem no jpanel
         */
        imgPanel.getGraphics().drawImage(imagemInput, 0, 0, null);
    }
    
    /**
     * Retorna o valor em RGB de acordo com o valor do pixel
     *
     * @param corRGB
     * @return
     */
    private int getCorPixel(int corRGB) {
        return new Color(corRGB, corRGB, corRGB).getRGB();
    }
    
}
